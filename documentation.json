{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "InMemoryDataService",
            "id": "injectable-InMemoryDataService-e7177d8dcb088295000ac0b771a35f7e",
            "file": "src/app/in-memory-data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createDb",
                    "args": [],
                    "optional": false,
                    "returnType": "{ heroes: {}; }",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "genId",
                    "args": [
                        {
                            "name": "heroes",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "heroes",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 11, name: 'Dr Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' },\n    ];\n    return { heroes };\n  }\n\n  // Overrides the genId method to ensure that a hero always has an id.\n  // If the heroes array is empty,\n  // the method below returns the initial number (11).\n  // if the heroes array is not empty, the method below returns the highest\n  // hero id + 1.\n  genId(heroes: any): any {\n    return heroes;\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1e4d379814e998ba784513d6a2cf232e",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-nav>\n  <router-outlet></router-outlet>\n</app-nav>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-3bcc62e6fe926f8278b05b9042e27c3a",
            "file": "src/app/views/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "components",
                    "defaultValue": "[{ name: 'Notification', to: '/components/notification' }]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n})\nexport class DashboardComponent {\n  components = [{ name: 'Notification', to: '/components/notification' }];\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "templateData": "<mat-grid-list cols=\"4\">\r\n  <mat-grid-tile *ngFor=\"let item of components\">\r\n    <mat-card\r\n      [routerLink]=\"item.to\"\r\n      class=\"mat-elevation-z1 shadow cursor-pointer\"\r\n    >\r\n      <mat-card-header>\r\n        <mat-card-title>\r\n          {{ item.name }}\r\n        </mat-card-title>\r\n        <mat-card-subtitle>\r\n          Use the virtual scrolling feature for high performance purposes.\r\n        </mat-card-subtitle>\r\n      </mat-card-header>\r\n    </mat-card>\r\n  </mat-grid-tile>\r\n</mat-grid-list>\r\n"
        },
        {
            "name": "EmptyComponent",
            "id": "component-EmptyComponent-c4349a0934f7042e54b38bf97a0cff76",
            "file": "src/app/layout/empty/empty.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-empty",
            "styleUrls": [
                "./empty.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./empty.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-empty',\n  templateUrl: './empty.component.html',\n  styleUrls: ['./empty.component.scss']\n})\nexport class EmptyComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./empty.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "NavComponent",
            "id": "component-NavComponent-af0393e147b7f539a8bc0d846c5825d9",
            "file": "src/app/shared/nav/nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-nav",
            "styleUrls": [
                "./nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appRouter",
                    "defaultValue": "this.router",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isHandset$",
                    "defaultValue": "this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(\n      map((result) => result.matches),\n      shareReplay()\n    )",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-nav',\n  templateUrl: './nav.component.html',\n  styleUrls: ['./nav.component.scss'],\n})\nexport class NavComponent {\n  isHandset$: Observable<boolean> = this.breakpointObserver\n    .observe(Breakpoints.Handset)\n    .pipe(\n      map((result) => result.matches),\n      shareReplay()\n    );\n\n  appRouter = this.router;\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private router: Router\n  ) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidenav-container {\n  height: 100%;\n}\n\n.sidenav {\n  width: 256px;\n}\n\n.sidenav .mat-toolbar {\n  background: inherit;\n}\n\n.mat-toolbar.mat-primary {\n  position: sticky;\n  top: 0;\n  z-index: 1;\n}\n\n.nav-list-active {\n  &:before {\n    content: '';\n    opacity: .12;\n    background-color: #6D28D9;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    position: absolute;\n    right: 0;\n    top: 0;\n    transition: .3s cubic-bezier(.25, .8, .5, 1);\n    border-radius: 4px;\n  }\n}\n",
                    "styleUrl": "./nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-sidenav-container class=\"sidenav-container bg-gray-200\">\n  <mat-sidenav\n    #drawer\n    [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n    [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n    [opened]=\"(isHandset$ | async) === false\"\n    class=\"sidenav shadow-lg mat-elevation-z2 px-2\"\n    fixedInViewport\n  >\n    <mat-toolbar>Ngm-admin</mat-toolbar>\n\n    <div\n      class=\"flex flex-col justify-between\"\n      style=\"height: calc(100vh - 64px)\"\n    >\n      <div>\n        <mat-nav-list *ngFor=\"let item of appRouter.config\">\n          <div class=\"p-4 uppercase tracking-widest text-gray-400 font-bold\">\n            {{ item.data?.subtitle }}\n          </div>\n          <mat-list-item\n            *ngIf=\"item.data?.name\"\n            [routerLinkActiveOptions]=\"{ exact: true }\"\n            [routerLink]=\"item.path\"\n            routerLinkActive=\"nav-list-active\"\n          >\n            <mat-icon\n              [routerLinkActiveOptions]=\"{ exact: true }\"\n              matListIcon\n              routerLinkActive=\"text-purple-700\"\n            >\n              {{ item.data?.icon }}\n            </mat-icon>\n            <div\n              [routerLinkActiveOptions]=\"{ exact: true }\"\n              routerLinkActive=\"text-purple-700\"\n            >\n              {{ item.data?.name }}\n            </div>\n          </mat-list-item>\n\n          <mat-list-item\n            *ngFor=\"let children of item.children\"\n            [routerLink]=\"item?.path + '/' + (children?.path ?? '')\"\n            routerLinkActive=\"nav-list-active\"\n          >\n            <mat-icon matlisticon routerLinkActive=\"text-purple-700\">{{\n              children.data?.icon\n            }}</mat-icon>\n            <div routerLinkActive=\"text-purple-700\">\n              {{ children.data?.name }}\n            </div>\n          </mat-list-item>\n        </mat-nav-list>\n      </div>\n\n      <div class=\"mx-auto mb-4\">\n        <a\n          class=\"block flex align-middle\"\n          color=\"primary\"\n          href=\"https://github.com/AGDholo/ngm-admin\"\n          mat-raised-button\n          target=\"_blank\"\n        >\n          <mat-icon class=\"mr-2\">cloud_download</mat-icon>\n          Free Download\n        </a>\n      </div>\n    </div>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar class=\"mat-elevation-z2 shadow-lg bg-white\">\n      <button\n        (click)=\"drawer.toggle()\"\n        *ngIf=\"isHandset$ | async\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        type=\"button\"\n      >\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span>Ngm-admin</span>\n    </mat-toolbar>\n\n    <div class=\"container mx-auto pt-10\">\n      <ng-content></ng-content>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"
        },
        {
            "name": "NotificationComponent",
            "id": "component-NotificationComponent-59e02cfe90b70d9fb32575bf61b77c8b",
            "file": "src/app/components/notification/notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification",
            "styleUrls": [
                "./notification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bordered",
                    "defaultValue": "false",
                    "line": 21,
                    "type": "Boolean"
                },
                {
                    "name": "flat",
                    "defaultValue": "false",
                    "line": 19,
                    "type": "Boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nconst notification = [\n  {\n    title: 'Lorem ipsum dolor',\n    desc: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sint, repudiandae?',\n    time: '4 min',\n    outdated: false,\n  },\n];\n\n@Component({\n  selector: 'app-notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.scss'],\n})\nexport class NotificationComponent {\n  @Input()\n  flat: Boolean = false;\n  @Input()\n  bordered: Boolean = false;\n\n  constructor() {}\n\n  public get notifications() {\n    return [...new Array(100)].reduce((items) => {\n      items.push(...notification);\n      return items;\n    }, []);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".virtual-scroll-viewport {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n\r\n.virtual-scroll-item {\r\n  height: 64px;\r\n}\r\n",
                    "styleUrl": "./notification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "accessors": {
                "notifications": {
                    "name": "notifications",
                    "getSignature": {
                        "name": "notifications",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            },
            "templateData": "<div\n  [ngClass]=\"{\n    'shadow-none': flat,\n    border: bordered\n  }\"\n  class=\"bg-white rounded-md shadow\"\n>\n  <div\n    class=\"\n      shadow\n      p-4\n      text-md\n      font-bold\n      capitalize\n      tracking-wider\n      text-gray-500\n      mat-elevation-z1\n    \"\n  >\n    Notifications\n  </div>\n  <mat-selection-list style=\"height: 500px\">\n    <cdk-virtual-scroll-viewport\n      class=\"virtual-scroll-viewport\"\n      itemSize=\"64\"\n      maxBufferPx=\"800\"\n      minBufferPx=\"400\"\n    >\n      <mat-list-item\n        *cdkVirtualFor=\"let item of notifications; let i = index\"\n        class=\"\n          cursor-pointer\n          transition\n          ease-in-out\n          hover:bg-gray-100\n          virtual-scroll-item\n        \"\n      >\n        <mat-icon class=\"bg-purple-700 text-white\" matListIcon>\n          notifications\n        </mat-icon>\n        <div matLine>\n          {{ item.title }}\n        </div>\n        <div class=\"text-sm mat-caption text-gray-500\" matLine>\n          {{ item.desc }}\n        </div>\n\n        <div class=\"mat-caption text-gray-500\">{{ item.time }}</div>\n\n        <mat-divider *ngIf=\"notifications.length !== i + 1\"></mat-divider>\n      </mat-list-item>\n    </cdk-virtual-scroll-viewport>\n  </mat-selection-list>\n</div>\n\n<cdk-virtual-scroll-viewport class=\"example-viewport\" itemSize=\"50\">\n  <div *cdkVirtualFor=\"let item of notifications\" class=\"example-item\">123</div>\n</cdk-virtual-scroll-viewport>\n"
        },
        {
            "name": "NotificationViewComponent",
            "id": "component-NotificationViewComponent-54cf825cd809e1f439da290e15eaf161",
            "file": "src/app/views/components/notification-view/notification-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification-view",
            "styleUrls": [
                "./notification-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-notification-view',\n  templateUrl: './notification-view.component.html',\n  styleUrls: ['./notification-view.component.scss'],\n})\nexport class NotificationViewComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./notification-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<iframe\n  class=\"w-full\"\n  src=\"http://localhost:6006/?path=/docs/ngm-components-notification--notification\"\n  style=\"height: calc(100vh - 150px)\"\n></iframe>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "EmptyComponent"
                        },
                        {
                            "name": "NavComponent"
                        },
                        {
                            "name": "NotificationComponent"
                        },
                        {
                            "name": "NotificationViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NotificationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  apiUrl: '',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:3000',\n}"
            },
            {
                "name": "notification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/notification/notification.component.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    title: 'Lorem ipsum dolor',\n    desc: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sint, repudiandae?',\n    time: '4 min',\n    outdated: false,\n  },\n]"
            },
            {
                "name": "Notification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/notification/notification.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/notification/notification.component.stories.ts",
                "type": "Story<NotificationComponent>",
                "defaultValue": "(args) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  apiUrl: '',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  apiUrl: 'http://localhost:3000',\n}"
                }
            ],
            "src/app/components/notification/notification.component.ts": [
                {
                    "name": "notification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/notification/notification.component.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    title: 'Lorem ipsum dolor',\n    desc: 'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Sint, repudiandae?',\n    time: '4 min',\n    outdated: false,\n  },\n]"
                }
            ],
            "src/app/components/notification/notification.component.stories.ts": [
                {
                    "name": "Notification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/notification/notification.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/notification/notification.component.stories.ts",
                    "type": "Story<NotificationComponent>",
                    "defaultValue": "(args) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "component": "DashboardComponent",
                        "path": "",
                        "data": {
                            "name": "Dashboard",
                            "icon": "dvr"
                        }
                    },
                    {
                        "data": {
                            "subtitle": "Components"
                        },
                        "path": "components",
                        "component": "EmptyComponent",
                        "children": [
                            {
                                "data": {
                                    "name": "Notification",
                                    "icon": "notifications_none"
                                },
                                "path": "notification",
                                "component": "NotificationViewComponent"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/notification/notification.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "notification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/in-memory-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InMemoryDataService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/empty/empty.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmptyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/nav/nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/views/components/notification-view/notification-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/views/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}